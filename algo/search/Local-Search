<!DOCTYPE html><html lang="vi"><head><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta charset="UTF-8"><meta name="viewport" content="user-scalable=yes, width=device-width, initial-scale=1, maximum-scale=5"><meta name="theme-color" content="#1976d2"><meta name="msapplication-TileColor" content="#1976d2"><meta name="msapplication-TileImage" content="/_assets/favicons/mstile-150x150.png"><title>Local Search | VNOI Wiki</title><meta name="description" content><meta property="og:title" content="Local Search"><meta property="og:type" content="website"><meta property="og:description" content><meta property="og:image"><meta property="og:url" content="wiki.vnoi.info/algo/search/Local-Search"><meta property="og:site_name" content="VNOI Wiki"><link rel="apple-touch-icon" sizes="180x180" href="/_assets/favicons/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="192x192" href="/_assets/favicons/android-chrome-192x192.png"><link rel="icon" type="image/png" sizes="32x32" href="/_assets/favicons/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/_assets/favicons/favicon-16x16.png"><link rel="mask-icon" href="/_assets/favicons/safari-pinned-tab.svg" color="#1976d2"><link rel="manifest" href="/_assets/manifest.json"><script>var siteConfig = {"title":"VNOI Wiki","theme":"default","darkMode":false,"tocPosition":"right","lang":"vi","rtl":false,"company":"VNOI","contentLicense":"","footerOverride":"","logoUrl":"/uploads/vnoi.svg"}
var siteLangs = []
</script><link type="text/css" rel="stylesheet" href="/_assets/css/app.14bb5aad096a8ce1a4b0.css"><script type="text/javascript" src="/_assets/js/runtime.js?1703587860"></script><script type="text/javascript" src="/_assets/js/app.js?1703587860"></script><style type="text/css">.page-col-content{max-width:1012px!important;margin-left:auto;margin-right:auto;text-align:justify}.v-main a{text-decoration:none}</style></head><body><div id="root"><page locale="vi" path="algo/search/Local-Search" title="Local Search" description :tags="[]" created-at="2023-12-25T11:04:01.904Z" updated-at="2023-12-25T12:35:39.588Z" author-name="Administrator" :author-id="1" editor="markdown" :is-published="true" toc="W3sidGl0bGUiOiJMb2NhbCBTZWFyY2giLCJhbmNob3IiOiIjbG9jYWwtc2VhcmNoIiwiY2hpbGRyZW4iOltdfSx7InRpdGxlIjoiQsOgaSB0b8OhbiBt4bufIMSR4bqndSAoVFNQKSIsImFuY2hvciI6IiNiw6BpLXRvw6FuLW3hu58txJHhuqd1LXRzcCIsImNoaWxkcmVuIjpbXX0seyJ0aXRsZSI6IlRoYW0gTGFtIiwiYW5jaG9yIjoiI3RoYW0tbGFtIiwiY2hpbGRyZW4iOltdfSx7InRpdGxlIjoiTG9jYWwgU2VhcmNoIiwiYW5jaG9yIjoiI2xvY2FsLXNlYXJjaC0xIiwiY2hpbGRyZW4iOltdfSx7InRpdGxlIjoiTG9jYWwgU2VhcmNoIGTGsOG7m2kgY8OhY2ggaGnhu4N1IGPhu6dhIMSR4bqhaSBz4buRIiwiYW5jaG9yIjoiI2xvY2FsLXNlYXJjaC1kxrDhu5tpLWPDoWNoLWhp4buDdS1j4bunYS3EkeG6oWktc+G7kSIsImNoaWxkcmVuIjpbXX0seyJ0aXRsZSI6IkLDoGkgdOG6rXAgw6FwIGThu6VuZzoiLCJhbmNob3IiOiIjYsOgaS104bqtcC3DoXAtZOG7pW5nIiwiY2hpbGRyZW4iOltdfV0=" :page-id="113" sidebar="W10=" nav-mode="NONE" comments-enabled effective-permissions="eyJjb21tZW50cyI6eyJyZWFkIjp0cnVlLCJ3cml0ZSI6ZmFsc2UsIm1hbmFnZSI6ZmFsc2V9LCJoaXN0b3J5Ijp7InJlYWQiOmZhbHNlfSwic291cmNlIjp7InJlYWQiOmZhbHNlfSwicGFnZXMiOnsicmVhZCI6dHJ1ZSwid3JpdGUiOmZhbHNlLCJtYW5hZ2UiOmZhbHNlLCJkZWxldGUiOmZhbHNlLCJzY3JpcHQiOmZhbHNlLCJzdHlsZSI6ZmFsc2V9LCJzeXN0ZW0iOnsibWFuYWdlIjpmYWxzZX19" edit-shortcuts="eyJlZGl0RmFiIjpmYWxzZSwiZWRpdE1lbnVCYXIiOmZhbHNlLCJlZGl0TWVudUJ0biI6ZmFsc2UsImVkaXRNZW51RXh0ZXJuYWxCdG4iOmZhbHNlLCJlZGl0TWVudUV4dGVybmFsTmFtZSI6IiIsImVkaXRNZW51RXh0ZXJuYWxJY29uIjoiIiwiZWRpdE1lbnVFeHRlcm5hbFVybCI6IiJ9" filename="algo/search/Local-Search.md"><template slot="contents"><div><h1 id="local-search" class="toc-header"><a class="toc-anchor" href="#local-search">¶</a> Local Search</h1>
<p>Tác giả: Nguyễn Thành Trung (RR)</p>
<h1 id="bài-toán-mở-đầu-tsp" class="toc-header"><a class="toc-anchor" href="#bài-toán-mở-đầu-tsp">¶</a> Bài toán mở đầu (TSP)</h1>
<p>Cho N điểm trên mặt phẳng, đánh số từ 1 đến N. Tìm một chu trình xuất phát từ điểm thứ 1, đi qua tất cả các điểm, mỗi đỉnh đúng 1 lần và quay trở về đỉnh ban đầu.</p>
<p>Bài toán này là NP, không có thuật toán tối ưu với độ phức tạp đa thức. Tên gọi phổ biến của bài này là Traveling Salesman Problem (TSP).</p>
<p>Khi gặp bài NP, ta chỉ có thể tìm cách đưa ra một kết quả càng tối ưu càng tốt. Một số phương pháp thường dùng là <a href="/translate/topcoder/Greedy-is-Good" class="is-internal-link is-valid-page">tham lam</a> hoặc local search - sẽ được nói trong bài viết này.</p>
<p>Bạn có thể nộp thử bài này ở <a href="https://oj.vnoi.info/problem/torch/" class="is-external-link">VNOJ</a>.</p>
<h1 id="tham-lam" class="toc-header"><a class="toc-anchor" href="#tham-lam">¶</a> Tham Lam</h1>
<p>Một thuật toán rất hồn nhiên nhất là, xuất phát từ điểm thứ 1, tại mỗi bước, ta sẽ di chuyển đến điểm gần nó nhất (mà chưa được di chuyển đến trước đó). Lặp lại N lần, ta thu được một chu trình.</p>
<p>Cài đặt 1 số phần chính:</p>
<pre class="prismjs line-numbers" data-start="1" v-pre="true"><code class="language-cpp">struct Point {
    double x, y;
    Point(double x = 0, double y = 0) : x(x), y(y) {}

    Point operator - (Point a) { return Point(x-a.x, y-a.y); }
    double len() { return sqrt(x*x + y*y); }
} a[MAXN];

bool used[MAXN];  // Đánh dấu điểm đã được đi qua.
int id[MAXN];  // Lưu chỉ số của các điểm trong kết quả tìm được.

void solve() {
    memset(used, false, sizeof used);
    used[1] = true;
    id[1] = 1;

    for(int i = 2; i &lt;= n; ++i) {
        double bestDist = 1e6;
        int save = -1;

        for(int j = 1; j &lt;= n; ++j) {
            double curDist = (a[current.id[i-1]] - a[j]).len();
            if (!used[j] &amp;&amp; curDist &lt; bestDist) {
                bestDist = curDist;
                save = j;
            }
        }
        id[i] = save;
        used[save] = true;
    }
}

</code></pre>
<p>Dưới đây là kết quả khi mình chạy với một bộ test được sinh random gồm 50 đỉnh:</p>
<p><img src="/uploads/local_search_greedy.png" alt></p>
<p>Khi quan sát kết quả của thuật toán trên, dễ thấy có rất nhiều cặp cạnh cắt nhau. Khi tồn tại 2 cạnh AB và CD cắt nhau, ta có thể đảo nó thành AC và BD hoặc AD và BC, và giữ nguyên phần còn lại của chu trình. Như vậy ta có thể thu được một kết quả tốt hơn. Nhận xét này đưa ta đến với ý tưởng thứ 2:</p>
<h1 id="local-search-1" class="toc-header"><a class="toc-anchor" href="#local-search-1">¶</a> Local Search</h1>
<p>Xét một chu trình ban đầu bất kỳ. Xét tất cả <svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.119ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1378.8 833.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-1-TEX-I-1D441"></use></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g></g></svg> cặp cạnh, với mỗi cặp cạnh u, v, ta có chu trình <code>1 --&gt; u-1 --&gt; u --&gt; v-1 --&gt; v --&gt; 1</code>, ta thử đổi nó thành <code>1 --&gt; u-1 --&gt; v-1 --&gt; u --&gt; v --&gt; 1</code>. Nếu việc đổi này cho ta một chu trình có trọng số nhỏ hơn, ta giữ lại chu trình mới này.</p>
<p>Cài đặt:</p>
<pre class="prismjs line-numbers" data-start="1" v-pre="true"><code class="language-cpp">void optimize() {
    while (true) {
        bool stop = true;
        for(int u = 2; u &lt;= n; ++u) {
            for(int v = n-1; v &gt; u; --v) {
                // t1 = (cạnh (u-1) --&gt; u) + (cạnh (v --&gt; (v+1))
                double t1 = (a[id[u-1]] - a[id[u]]).len()
                        + (a[id[v]] - a[id[v+1]]).len();
                // t2 = (cạnh (u-1) --&gt; v) + (cạnh (u --&gt; (v+1))
                double t2 = (a[id[u-1]] - a[id[v]]).len()
                        + (a[id[u]] - a[id[v+1]]).len();
                if (t1 &gt; t2) {  // Nếu đổi chu trình cho kết quả tốt hơn
                    for(int i = u, j = v; i &lt;= j; ++i, --j) {
                        swap(id[i], id[j]);
                    }
                    stop = false;
                }
            }
        }
        if (stop) break;
    }
}
</code></pre>
<p>Minh họa cho test trên (chú ý rằng mình cài đặt sai và không xét cạnh nối từ đỉnh cuối đến đỉnh 1, nên còn một cặp cạnh cắt nhau <sup>_</sup>):</p>
<p><img src="/uploads/local_search_reverse.png" alt></p>
<p>Ý tưởng này chính là nền tảng của Local Search: Xuất phát từ một cấu hình kết quả, ta tìm cách thay đổi một phần của cấu hình để đạt được một cấu hình tốt hơn. Thông thường, cài đặt local search gồm 3 bước chính:</p>
<ul>
<li>Khởi tạo một cấu hình kết quả bất kỳ</li>
<li>Gọi C là cấu hình hiện tại. Ta xét các cấu hình "kề" với C, chọn ra cấu hình tốt nhất. Cập nhật cấu hình này cho C.</li>
<li>Lặp lại đến khi ta không thể cập nhật được C.</li>
</ul>
<p>Trong các bước trên có đề cập đến khái niệm "kề" của 2 cấu hình. Khái niệm này chỉ đơn giản là tập những cấu hình mà ta xét đến khi đang ở một cấu hình nhất định. Chẳng hạn trong bài toán mở đầu, với mỗi đường đi, các cấu hình kề nó là các đường đi nhận được khi đổi một cặp cạnh.</p>
<h1 id="local-search-dưới-cách-hiểu-của-đại-số" class="toc-header"><a class="toc-anchor" href="#local-search-dưới-cách-hiểu-của-đại-số">¶</a> Local Search dưới cách hiểu của đại số</h1>
<p>Xét một bài toán tìm giá trị lớn nhất của một hàm 2 chiều J(theta0, theta1).</p>
<p><img src="/uploads/local_search_2d_func.png" alt></p>
<p>Hình vẽ trên mô tả cách làm của local search: Xuất phát từ điểm xanh đậm, ta xét các điểm ở gần nó, tìm điểm mà J lớn nhất, rồi di chuyển đến điểm đó.</p>
<h1 id="bài-tập-áp-dụng" class="toc-header"><a class="toc-anchor" href="#bài-tập-áp-dụng">¶</a> Bài tập áp dụng:</h1>
<ul>
<li><a href="https://open.kattis.com/contests/vietnam-national17-open/problems/europeantrip" class="is-external-link">ACM ICPC National Vietnam 2017 - Bài E</a>
<ul>
<li>Đây là một bài tập điển hình về áp dụng Local Search trong lập trình thi đấu (Competitive programming). Các bạn nên làm thử bài này trước khi làm những bài khác.</li>
<li><a href="https://docs.google.com/document/d/1cDQEaf_YabpefiG7PiQZErHbr7AJIFjt7IIiDv9n4N4/edit" class="is-external-link">Lời giải chi tiết</a></li>
</ul>
</li>
<li><a href="http://www.spoj.com/problems/PANEL/" class="is-external-link">SPOJ - PANEL</a></li>
<li><a href="http://ipsc.ksp.sk/2013/real/problems/i.html" class="is-external-link">IPSC 2013 - Invisible cats</a></li>
<li><a href="https://www.facebook.com/note.php?note_id=10150106829298920" class="is-external-link">https://www.facebook.com/note.php?note_id=10150106829298920</a></li>
</ul>
</div></template><template slot="comments"><div><comments></comments></div></template></page></div><script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'8bdcd20efff73fbc',t:'MTcyNTQ0MDc1NS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body></html>