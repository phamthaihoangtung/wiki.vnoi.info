<!DOCTYPE html><html lang="vi"><head><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta charset="UTF-8"><meta name="viewport" content="user-scalable=yes, width=device-width, initial-scale=1, maximum-scale=5"><meta name="theme-color" content="#1976d2"><meta name="msapplication-TileColor" content="#1976d2"><meta name="msapplication-TileImage" content="/_assets/favicons/mstile-150x150.png"><title> | VNOI Wiki</title><meta name="description" content><meta property="og:title" content><meta property="og:type" content="website"><meta property="og:description" content><meta property="og:image"><meta property="og:url" content="wiki.vnoi.info/translate/PyTorch-la-gi"><meta property="og:site_name" content="VNOI Wiki"><link rel="apple-touch-icon" sizes="180x180" href="/_assets/favicons/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="192x192" href="/_assets/favicons/android-chrome-192x192.png"><link rel="icon" type="image/png" sizes="32x32" href="/_assets/favicons/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/_assets/favicons/favicon-16x16.png"><link rel="mask-icon" href="/_assets/favicons/safari-pinned-tab.svg" color="#1976d2"><link rel="manifest" href="/_assets/manifest.json"><script>var siteConfig = {"title":"VNOI Wiki","theme":"default","darkMode":false,"tocPosition":"right","lang":"vi","rtl":false,"company":"VNOI","contentLicense":"","footerOverride":"","logoUrl":"/uploads/vnoi.svg"}
var siteLangs = []
</script><link type="text/css" rel="stylesheet" href="/_assets/css/app.14bb5aad096a8ce1a4b0.css"><script type="text/javascript" src="/_assets/js/runtime.js?1703587860"></script><script type="text/javascript" src="/_assets/js/app.js?1703587860"></script><style type="text/css">.page-col-content{max-width:1012px!important;margin-left:auto;margin-right:auto;text-align:justify}.v-main a{text-decoration:none}</style></head><body><div id="root"><page locale="vi" path="translate/PyTorch-la-gi" title description :tags="[]" created-at="2023-12-25T10:58:54.951Z" updated-at="2023-12-25T12:31:35.321Z" author-name="Administrator" :author-id="1" editor="markdown" :is-published="true" toc="W3sidGl0bGUiOiJD4buZbmcgeCB2w6BvIHkiLCJhbmNob3IiOiIjY+G7mW5nLXgtdsOgby15IiwiY2hpbGRyZW4iOlt7InRpdGxlIjoiSW4gWzI5XTpcbnkgPSB4LnZpZXcoMTQpIiwiYW5jaG9yIjoiI2luLTI5eS14dmlldzE0IiwiY2hpbGRyZW4iOltdfV19LHsidGl0bGUiOiJDaOG6oXkgbuG6v3UgbmjGsCBtw6F5IHTDrW5oIGjhu5cgdHLhu6MgQ1VEQSAoY8OzIEdQVSBj4bunYSBOVmlkaWEpIiwiYW5jaG9yIjoiI2No4bqheS1u4bq/dS1uaMawLW3DoXktdMOtbmgtaOG7ly10cuG7oy1jdWRhLWPDsy1ncHUtY+G7p2EtbnZpZGlhIiwiY2hpbGRyZW4iOltdfSx7InRpdGxlIjoiRMO5bmcgdG9yY2guZGV2aWNlIMSR4buDIMSRxrBhIHRlbnNvcnMgcmEvdsOgbyBHUFUiLCJhbmNob3IiOiIjZMO5bmctdG9yY2hkZXZpY2UtxJHhu4MtxJHGsGEtdGVuc29ycy1yYXbDoG8tZ3B1IiwiY2hpbGRyZW4iOltdfV0=" :page-id="39" sidebar="W10=" nav-mode="NONE" comments-enabled effective-permissions="eyJjb21tZW50cyI6eyJyZWFkIjp0cnVlLCJ3cml0ZSI6ZmFsc2UsIm1hbmFnZSI6ZmFsc2V9LCJoaXN0b3J5Ijp7InJlYWQiOmZhbHNlfSwic291cmNlIjp7InJlYWQiOmZhbHNlfSwicGFnZXMiOnsicmVhZCI6dHJ1ZSwid3JpdGUiOmZhbHNlLCJtYW5hZ2UiOmZhbHNlLCJkZWxldGUiOmZhbHNlLCJzY3JpcHQiOmZhbHNlLCJzdHlsZSI6ZmFsc2V9LCJzeXN0ZW0iOnsibWFuYWdlIjpmYWxzZX19" edit-shortcuts="eyJlZGl0RmFiIjpmYWxzZSwiZWRpdE1lbnVCYXIiOmZhbHNlLCJlZGl0TWVudUJ0biI6ZmFsc2UsImVkaXRNZW51RXh0ZXJuYWxCdG4iOmZhbHNlLCJlZGl0TWVudUV4dGVybmFsTmFtZSI6IiIsImVkaXRNZW51RXh0ZXJuYWxJY29uIjoiIiwiZWRpdE1lbnVFeHRlcm5hbFVybCI6IiJ9" filename="translate/PyTorch-la-gi.md"><template slot="contents"><div><p>Xem Nguồn (notebook tương tác)<br>
<a href="https://github.com/duc0/vitech/blob/master/jupyter/pytorch-tutorials/ch1_tensor.ipynb" class="is-external-link">https://github.com/duc0/vitech/blob/master/jupyter/pytorch-tutorials/ch1_tensor.ipynb</a></p>
<p>PyTorch là gì?<br>
PyTorch là thư viện tính toán xây dựng trên nền tảng ngôn ngữ Python. PyTorch nhắm vào hai mục tiêu chính</p>
<p>Hỗ trợ tính toán khoa học, thay thế cho thư viện NumPy (một thư viện Python hỗ trợ tính toán khoa học trên mảng nhiều chiều) và hỗ trợ GPU<br>
Trở thành một nền tảng Deep Learning linh hoạt và hiệu quả<br>
PyTorch được phát triển bởi Facebook (<a href="https://pytorch.org/" class="is-external-link">https://pytorch.org/</a>) và là một thư viện mã nguồn mở (<a href="https://github.com/pytorch/pytorch" class="is-external-link">https://github.com/pytorch/pytorch</a>)</p>
<p>Giới thiệu<br>
Tensor ^^^^^^^</p>
<p>Trong ngữ cảnh các thư viện tính toán, Tensor có thể hiểu như là mảng nhiều chiều (giống như ndarray của thư viện NumPy). Tensor là sự tổng quát hoá của vector (mảng 1 chiều), ma trận (mảng 2 chiều). Tensor của PyTorch có thêm một lợi thế là có hỗ trợ tính toán trên GPU để tăng tốc độ.</p>
<p>Cài đặt<br>
Cài đặt anaconda sau đó chạy lệnh</p>
<p>conda install pytorch torchvision -c pytorch</p>
<p>Chạy jupyter notebook để mở notebook này tương tác</p>
<p>Các hỗ trợ cơ bản về Tensor nằm trong module torch</p>
<p>In [10]:<br>
from <strong>future</strong> import print_function<br>
import torch<br>
Định nghĩa một ma trận 5x3, chưa khởi tạo giá trị:</p>
<p>In [11]:<br>
x = torch.empty(5, 3)<br>
print(x)<br>
tensor([[ 0.0000e+00, -2.0000e+00, -1.6168e-21],<br>
[ 2.8643e-42, 7.1801e+28, 2.5958e-06],<br>
[ 7.3983e+31, 2.7691e+20, 1.0645e+24],<br>
[ 5.5603e+31, 4.2964e+24, 1.5842e-10],<br>
[ 3.9831e-11, 1.6925e-41, 2.5031e-37]])<br>
Định nghĩa một ma trận 5x3 được khởi tạo ngẫu nhiên:</p>
<p>In [ ]:<br>
x = torch.rand(5, 3)<br>
print(x)<br>
Định nghĩa một ma trận 5x3 khởi tạo với giá trị 0, kiểu dữ liệu (dtype) là long:</p>
<p>In [ ]:<br>
x = torch.zeros(5, 3, dtype=torch.long)<br>
print(x)<br>
Khởi tạo tensor trực tiếp từ số liệu:</p>
<p>In [ ]:<br>
x = torch.tensor([5.5, 3])<br>
print(x)<br>
Khởi tạo tensor từ một tensor sẵn có. Các phương thức khởi tạo này sẽ dùng lại các thuộc tính của tensor đầu vào (như là dtype) trừ khi người dùng cung cấp giá trị mới cho các thuộc tính.</p>
<p>In [18]:<br>
x = x.new_ones(5, 3, dtype=torch.double) # new_* methods take in sizes<br>
print(x)</p>
<p>x = torch.randn_like(x, dtype=torch.float) # override dtype!<br>
print(x) # result has the same size<br>
tensor([[1., 1., 1.],<br>
[1., 1., 1.],<br>
[1., 1., 1.],<br>
[1., 1., 1.],<br>
[1., 1., 1.]], dtype=torch.float64)<br>
tensor([[-1.4884, 2.4420, 0.7131],<br>
[ 2.2873, -0.3993, -0.0366],<br>
[-1.8804, -0.4695, 0.4877],<br>
[ 0.1583, 0.4593, 0.1510],<br>
[-0.1133, -1.4087, 1.6926]])<br>
Trả về kích thước của tensor (nghĩa là tất cả kích thước của các chiều của mảng):</p>
<p>In [13]:<br>
print(x.size())<br>
torch.Size([5, 3])<br>
Ghi chú<br>
<code>torch.Size</code> là tuple trong Python nên sẽ hỗ trợ tất cả các phép tính thông dụng với tuple.</p>
<p>Phép toán ^^^^^^^^^^ Có nhiều cú pháp khác nhau để biểu diễn phép toán. Trong ví dụ sau ta sẽ xem xét phép toán cộng 2 tensor.</p>
<p>Phép cộng: cú pháp thứ nhất</p>
<p>In [20]:<br>
x = torch.ones(2, 3)<br>
y = 3 * torch.ones(2, 3)<br>
print(x)<br>
print(y)<br>
print(x + y)<br>
tensor([[1., 1., 1.],<br>
[1., 1., 1.]])<br>
tensor([[3., 3., 3.],<br>
[3., 3., 3.]])<br>
tensor([[4., 4., 4.],<br>
[4., 4., 4.]])<br>
Phép cộng: cú pháp thứ hai</p>
<p>In [21]:<br>
print(torch.add(x, y))<br>
tensor([[4., 4., 4.],<br>
[4., 4., 4.]])<br>
Phép cộng: chỉ định trước tensor đầu ra</p>
<p>In [22]:<br>
result = torch.empty(5, 3)<br>
torch.add(x, y, out=result)<br>
print(result)<br>
tensor([[4., 4., 4.],<br>
[4., 4., 4.]])<br>
Phép cộng tại chỗ (lưu ý việc tiết kiệm bộ nhớ là khá quan trọng để tăng hiệu quả tính toán)</p>
<p>In [23]:</p>
<h1 id="cộng-x-vào-y" class="toc-header"><a class="toc-anchor" href="#cộng-x-vào-y">¶</a> Cộng x vào y</h1>
<p>y.add_(x)<br>
print(y)<br>
tensor([[4., 4., 4.],<br>
[4., 4., 4.]])<br>
Ghi chú<br>
Các phép toán nào mà thay đổi giá trị của tensor tại chỗ thì sẽ có tên kết thúc bởi dấu <code>_</code>. Ví dụ: <code>x.copy_(y)</code>, <code>x.t_()</code>, sẽ thay đổi giá trị của <code>x</code>.</p>
<p>Bạn có thể tận dụng các cách truy cập theo chỉ số giống như NumPy! Ví dụ để in ra cột #1 của ma trận x:</p>
<p>In [25]:<br>
print(x[:, 1])<br>
tensor([1., 1.])<br>
Thay đổi kích thước: nào muốn thay đổi kích thước Tensor, bạn có thể dùng torch.view:</p>
<p>In [28]:<br>
x = torch.randn(4, 4)<br>
y = x.view(16)<br>
z = x.view(-1, 8) # -1 nghĩa là là kích thước sẽ được suy ra từ các chiều còn lại<br>
print(x.size(), y.size(), z.size())<br>
torch.Size([4, 4]) torch.Size([16]) torch.Size([2, 8])<br>
Tất nhiên khi dùng view, kích thước mới phải có số phần tử bằng số phần tử của Tensor. Ví dụ sau sẽ báo lỗi:</p>
<h2 id="in-29y-xview14" class="toc-header"><a class="toc-anchor" href="#in-29y-xview14">¶</a> In [29]:<br>
y = x.view(14)</h2>
<p>RuntimeError Traceback (most recent call last)<br>
<ipython-input-29-66e035dcc596> in <module>()<br>
----&gt; 1 y = x.view(14)</module></ipython-input-29-66e035dcc596></p>
<p>RuntimeError: invalid argument 2: size '[14]' is invalid for input with 16 elements at /Users/soumith/miniconda2/conda-bld/pytorch_1532623076075/work/aten/src/TH/THStorage.cpp:84<br>
Nếu tensor chỉ có 1 phần tử thì có thể dùng .item() để truy cập giá trị duy nhất đó</p>
<p>In [30]:<br>
x = torch.randn(1)<br>
print(x)<br>
print(x.item())<br>
tensor([-0.0990])<br>
-0.09897159039974213<br>
Đọc thêm:</p>
<p>Hơn 100+ phép toán trên Tensor, bao gồm transposing, indexing, slicing, các phép tính toán học, đại số tuyến tính, số ngẫu nhiên, ..., được mô tả tại <a href="http://pytorch.org/docs/torch" class="is-external-link">http://pytorch.org/docs/torch</a>_.</p>
<p>Tương tác với NumPy<br>
Chuyển đổi giữa PyTorch tensor và mảng NumPy rất dễ dàng.</p>
<p>PyTorch tensor và mảng NumPy cùng chia sẻ bộ nhớ dữ liệu, thay đổi bên này thì bên kia cũng thay đổi theo.</p>
<p>Chuyển từ Tensor về mảng NumPy ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p>
<p>In [31]:<br>
a = torch.ones(5)<br>
print(a)<br>
tensor([1., 1., 1., 1., 1.])<br>
In [32]:<br>
b = a.numpy()<br>
print(b)<br>
[1. 1. 1. 1. 1.]<br>
Thay đổi a thì b cũng thay đổi theo</p>
<p>In [33]:<br>
a.add_(1)<br>
print(a)<br>
print(b)<br>
tensor([2., 2., 2., 2., 2.])<br>
[2. 2. 2. 2. 2.]<br>
Chuyển từ mảng NumPy về Tensor ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Thay đổi a thì b cũng thay đổi theo</p>
<p>In [34]:<br>
import numpy as np<br>
a = np.ones(5)<br>
b = torch.from_numpy(a)<br>
np.add(a, 1, out=a)<br>
print(a)<br>
print(b)<br>
[2. 2. 2. 2. 2.]<br>
tensor([2., 2., 2., 2., 2.], dtype=torch.float64)<br>
Tất cả các kiểu Tensor (trên CPU) ngoại trừ CharTensor đều hỗ trợ chuyển đổi với NumPy và ngược lại.</p>
<p>Tensors trên CUDA<br>
(CUDA là nền tảng tính toán GPU của NVidia) Tensor có thể được chuyển đến thiết bị bất kỳ bằng cách gọi hàm .to .</p>
<p>In [35]:</p>
<h1 id="chạy-nếu-như-máy-tính-hỗ-trợ-cuda-có-gpu-của-nvidia" class="toc-header"><a class="toc-anchor" href="#chạy-nếu-như-máy-tính-hỗ-trợ-cuda-có-gpu-của-nvidia">¶</a> Chạy nếu như máy tính hỗ trợ CUDA (có GPU của NVidia)</h1>
<h1 id="dùng-torchdevice-để-đưa-tensors-ravào-gpu" class="toc-header"><a class="toc-anchor" href="#dùng-torchdevice-để-đưa-tensors-ravào-gpu">¶</a> Dùng <code>torch.device</code> để đưa tensors ra/vào GPU</h1>
<p>if torch.cuda.is_available():<br>
device = torch.device("cuda") # a CUDA device object<br>
y = torch.ones_like(x, device=device) # directly create a tensor on GPU<br>
x = <a href="http://x.to" class="is-external-link">x.to</a>(device) # or just use strings <code>.to("cuda")</code><br>
z = x + y<br>
print(z)<br>
print(<a href="http://z.to" class="is-external-link">z.to</a>("cpu", torch.double)) # <code>.to</code> can also change dtype together!</p>
</div></template><template slot="comments"><div><comments></comments></div></template></page></div><script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'8bdcd2218bab3fbc',t:'MTcyNTQ0MDc1OC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body></html>